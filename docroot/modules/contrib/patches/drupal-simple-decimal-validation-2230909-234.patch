diff --git a/core/lib/Drupal/Component/Utility/Number.php b/core/lib/Drupal/Component/Utility/Number.php
index 838c33c45..963427418 100644
--- a/core/lib/Drupal/Component/Utility/Number.php
+++ b/core/lib/Drupal/Component/Utility/Number.php
@@ -9,6 +9,67 @@
  */
 class Number {

+  /**
+   * Normalizes a numeric value to a lossless, easily parseable numeric string.
+   *
+   * The normalized value is string suitable for use with libraries such as
+   * BCMath (https://secure.php.net/manual/en/book.bc.php).
+   *
+   * @param $number int|float|string
+   *   The value to normalize. If this is a string, it must be formatted as an
+   *   integer or a float. Floats with a higher number of significant decimals
+   *   than precision value from the PHP runtime configuration [default: 14]
+   *   will lose the additional precision as PHP does not guarantee.
+   *
+   * @return string
+   *   The normalized numeric string.
+   */
+  public static function normalize($number) {
+    // Convert non-strings to strings, for consistent and lossless processing.
+    if (is_float($number)) {
+      // If the float has less significant decimals than the number we can
+      // guarantee, convert it to a string directly.
+      if (preg_match(sprintf('/^\d+\.\d{1,%d}$/', ini_get('precision')), (string) $number)) {
+        return (string) $number;
+      }
+      // For floats with more significant decimals than the number we can
+      // guarantee, discard the not guaranteed ones.
+      return rtrim(number_format($number, ini_get('precision'), '.', ''), '0');
+    }
+    return (string) $number;
+  }
+
+  /**
+   * Counts a number's significant decimals.
+   *
+   * @param $number int|float|string
+   *   The number whose decimals needed to be to count. If this is a string, it
+   *   must be an integer or a float formatted. Floats are limited to the
+   *   precision guaranteed by PHP (for example, 15).
+   *
+   * @return int
+   *   Number of significant decimal digits. Floats are limited to the precision
+   *   guaranteed by PHP (for example, 15). Numeric strings do not suffer from
+   *   the system-specific limitations to float precision, so they can contain
+   *   many more significant decimals.
+   *
+   *   Number::countSignificantDecimals(100.12345678901234567890) returns 11 but
+   *   Number::countSignificantDecimals('100.12345678901234567890') returns 20.
+   */
+  public static function countSignificantDecimals($number) {
+    $number = static::normalize($number);
+
+    // If no decimal separator is encountered, the step is an integer and the
+    // there are 0 significant decimals.
+    if (strrpos($number, '.') === FALSE) {
+      return 0;
+    }
+
+    // If a decimal separator is encountered, count the number of significant
+    // decimal digits.
+    return strlen($number) - strrpos($number, '.') - 1;
+  }
+
   /**
    * Verifies that a number is a multiple of a given step.
    *
@@ -17,11 +78,20 @@ class Number {
    *
    * This is based on the number/range verification methods of webkit.
    *
-   * @param float $value
-   *   The value that needs to be checked.
-   * @param float $step
-   *   The step scale factor. Must be positive.
-   * @param float $offset
+   * Besides integers and floating numbers, we also support decimal numbers
+   * which are not stored in IEEE 754 format. In somewhat higher precisions for
+   * these numbers, the $step value cannot accurately represent the desired
+   * precision, when it is passed as a float. Passing it as a string bypasses
+   * this loss of precision and enables a correct calculation of the step
+   * validity.
+   *
+   * @param int|float|string $value
+   *   The value that needs to be checked. If this is a string, it must be
+   *   formatted as an integer or a float.
+   * @param int|float|string $step
+   *   The step scale factor. Must be positive. If this is a string, it must be
+   *   formatted as an integer or a float.
+   * @param float|null $offset
    *   (optional) An offset, to which the difference must be a multiple of the
    *   given step.
    *
@@ -31,7 +101,27 @@ class Number {
    * @see http://opensource.apple.com/source/WebCore/WebCore-1298/html/NumberInputType.cpp
    */
   public static function validStep($value, $step, $offset = 0.0) {
-    $double_value = (double) abs($value - $offset);
+    // Confirm the step is positive.
+    if ($step <= 0) {
+      return FALSE;
+    }
+
+    // Convert the value to a float so we can evaluate the precision later.
+    // Because subtracting the offset may change the value's precision, we only
+    // do so if it was set explicitly (is not null).
+    $float_value = (float) abs($value - $offset);
+
+    // The expected number significant decimals is dictated by the step.
+    $expected_significant_decimals = static::countSignificantDecimals($step) + 1;
+
+    // If the actual value has more significant decimals than expected, it has a
+    // higher precision than desired it isn't divisible by the step.
+    $actual_significant_decimals = static::countSignificantDecimals($float_value);
+    if ($actual_significant_decimals > $expected_significant_decimals) {
+      return FALSE;
+    }
+
+    $float_value = (float) round($float_value, $expected_significant_decimals);

     // The fractional part of a double has 53 bits. The greatest number that
     // could be represented with that is 2^53. If the given value is even bigger
@@ -39,18 +129,19 @@ public static function validStep($value, $step, $offset = 0.0) {
     // remainder. Since that remainder can't even be represented with a single
     // precision float the following computation of the remainder makes no sense
     // and we can safely ignore it instead.
-    if ($double_value / pow(2.0, 53) > $step) {
+    if ($float_value / pow(2.0, 53) > $step) {
       return TRUE;
     }

+    $expected_float_value = (float) round($step * round($float_value / $step), $expected_significant_decimals);
     // Now compute that remainder of a division by $step.
-    $remainder = (double) abs($double_value - $step * round($double_value / $step));
+    $remainder = (float) abs($float_value - $expected_float_value);

     // $remainder is a double precision floating point number. Remainders that
     // can't be represented with single precision floats are acceptable. The
     // fractional part of a float has 24 bits. That means remainders smaller than
     // $step * 2^-24 are acceptable.
-    $computed_acceptable_error = (double) ($step / pow(2.0, 24));
+    $computed_acceptable_error = (float) ($step / pow(2.0, 24));

     return $computed_acceptable_error >= $remainder || $remainder >= ($step - $computed_acceptable_error);
   }
diff --git a/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/DecimalItem.php b/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/DecimalItem.php
index 379ff74db..8c42f2b1f 100644
--- a/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/DecimalItem.php
+++ b/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/DecimalItem.php
@@ -68,7 +68,7 @@ public function storageSettingsForm(array &$form, FormStateInterface $form_state
       '#type' => 'number',
       '#title' => t('Precision'),
       '#min' => 10,
-      '#max' => 32,
+      '#max' => ini_get('precision') < 10 ? 10 : ini_get('precision'),
       '#default_value' => $settings['precision'],
       '#description' => t('The total number of digits to store in the database, including those to the right of the decimal.'),
       '#disabled' => $has_data,
@@ -78,7 +78,7 @@ public function storageSettingsForm(array &$form, FormStateInterface $form_state
       '#type' => 'number',
       '#title' => t('Scale', [], ['context' => 'decimal places']),
       '#min' => 0,
-      '#max' => 10,
+      '#max' => ini_get('precision'),
       '#default_value' => $settings['scale'],
       '#description' => t('The number of digits to the right of the decimal.'),
       '#disabled' => $has_data,
@@ -112,8 +112,10 @@ public function fieldSettingsForm(array $form, FormStateInterface $form_state) {
     $element = parent::fieldSettingsForm($form, $form_state);
     $settings = $this->getSettings();

-    $element['min']['#step'] = pow(0.1, $settings['scale']);
-    $element['max']['#step'] = pow(0.1, $settings['scale']);
+    // Convert to string, for consistent and lossless processing.
+    $step = number_format(pow(0.1, $settings['scale']), $settings['scale'], '.', '');
+    $element['min']['#step'] = $step;
+    $element['max']['#step'] = $step;

     return $element;
   }
diff --git a/core/lib/Drupal/Core/Field/Plugin/Field/FieldWidget/NumberWidget.php b/core/lib/Drupal/Core/Field/Plugin/Field/FieldWidget/NumberWidget.php
index b4fac537b..fe028fd3f 100644
--- a/core/lib/Drupal/Core/Field/Plugin/Field/FieldWidget/NumberWidget.php
+++ b/core/lib/Drupal/Core/Field/Plugin/Field/FieldWidget/NumberWidget.php
@@ -73,12 +73,13 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
       '#type' => 'number',
       '#default_value' => $value,
       '#placeholder' => $this->getSetting('placeholder'),
+      '#number_type' => $this->fieldDefinition->getType(),
     ];

     // Set the step for floating point and decimal numbers.
     switch ($this->fieldDefinition->getType()) {
       case 'decimal':
-        $element['#step'] = pow(0.1, $field_settings['scale']);
+        $element['#step'] = number_format(pow(0.1, $field_settings['scale']), $field_settings['scale'], '.', '');
         break;

       case 'float':
diff --git a/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php b/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php
index 595aba8e2..01a1ec067 100644
--- a/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php
+++ b/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php
@@ -44,11 +44,13 @@ protected function setUp(): void {
   public function testNumberDecimalField() {
     // Create a field with settings to validate.
     $field_name = mb_strtolower($this->randomMachineName());
+    // Having precision = 10 and scale = 4 means 6 numbers before the decimal
+    // point and 4 after
     FieldStorageConfig::create([
       'field_name' => $field_name,
       'entity_type' => 'entity_test',
       'type' => 'decimal',
-      'settings' => ['precision' => 8, 'scale' => 4],
+      'settings' => ['precision' => 10, 'scale' => 4],
     ])->save();
     FieldConfig::create([
       'field_name' => $field_name,
@@ -78,16 +80,29 @@ public function testNumberDecimalField() {
     $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     $this->assertSession()->responseContains('placeholder="0.00"');

-    // Submit a signed decimal value within the allowed precision and scale.
-    $value = '-1234.5678';
-    $edit = [
-      "{$field_name}[0][value]" => $value,
+    // Submit decimal values within the allowed precision and scale.
+    $valid_entries = [
+      '-1234.5678',
+      '19999.0000',
+      '99999.0000',
+      '909888.96',
+      '909888.99',
+      '988999.0096',
+      '988999.0099',
     ];
-    $this->submitForm($edit, 'Save');
-    preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
-    $id = $match[1];
-    $this->assertSession()->pageTextContains('entity_test ' . $id . ' has been created.');
-    $this->assertSession()->responseContains($value);
+
+    foreach ($valid_entries as $valid_entry) {
+      $this->drupalGet('entity_test/add');
+      $edit = [
+        "{$field_name}[0][value]" => $valid_entry,
+      ];
+      $this->drupalPostForm(NULL, $edit, t('Save'));
+      preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
+      $id = $match[1];
+      $this->assertText(t('entity_test @id has been created.', ['@id' => $id]), 'Entity was created');
+      $this->assertSession()->responseContains($valid_entry);
+      $this->assertSession()->responseNotContains(t('%name is not a valid number.', ['%name' => $field_name]));
+    }

     // Try to create entries with more than one decimal separator; assert fail.
     $wrong_entries = [
@@ -104,7 +119,7 @@ public function testNumberDecimalField() {
         "{$field_name}[0][value]" => $wrong_entry,
       ];
       $this->submitForm($edit, 'Save');
-      $this->assertSession()->pageTextContains("{$field_name} must be a number.");
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }

     // Try to create entries with minus sign not in the first position.
@@ -122,7 +137,7 @@ public function testNumberDecimalField() {
         "{$field_name}[0][value]" => $wrong_entry,
       ];
       $this->submitForm($edit, 'Save');
-      $this->assertSession()->pageTextContains("{$field_name} must be a number.");
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }
   }

@@ -209,7 +224,7 @@ public function testNumberIntegerField() {
       "{$field_name}[0][value]" => $minimum - 1,
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertSession()->pageTextContains("{$field_name} must be higher than or equal to {$minimum}.");
+    $this->assertSession()->responseContains(t('%name must be higher than or equal to %minimum.', ['%name' => $field_name, '%minimum' => $minimum]));

     // Try to set a decimal value
     $this->drupalGet('entity_test/add');
@@ -217,7 +232,7 @@ public function testNumberIntegerField() {
       "{$field_name}[0][value]" => 1.5,
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertSession()->pageTextContains("{$field_name} is not a valid number.");
+    $this->assertSession()->responseContains(t('%name is not a valid number.', ['%name' => $field_name]));

     // Try to set a value above the maximum value
     $this->drupalGet('entity_test/add');
@@ -225,7 +240,7 @@ public function testNumberIntegerField() {
       "{$field_name}[0][value]" => $maximum + 1,
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertSession()->pageTextContains("{$field_name} must be lower than or equal to {$maximum}.");
+    $this->assertSession()->responseContains(t('%name must be lower than or equal to %maximum.', ['%name' => $field_name, '%maximum' => $maximum]));

     // Try to set a wrong integer value.
     $this->drupalGet('entity_test/add');
@@ -233,7 +248,7 @@ public function testNumberIntegerField() {
       "{$field_name}[0][value]" => '20-40',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertSession()->pageTextContains("{$field_name} must be a number.");
+    $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));

     // Test with valid entries.
     $valid_entries = [
@@ -352,7 +367,7 @@ public function testNumberFloatField() {
         "{$field_name}[0][value]" => $wrong_entry,
       ];
       $this->submitForm($edit, 'Save');
-      $this->assertSession()->pageTextContains("{$field_name} must be a number.");
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }

     // Try to create entries with minus sign not in the first position.
@@ -370,7 +385,7 @@ public function testNumberFloatField() {
         "{$field_name}[0][value]" => $wrong_entry,
       ];
       $this->submitForm($edit, 'Save');
-      $this->assertSession()->pageTextContains("{$field_name} must be a number.");
+      $this->assertSession()->responseContains(t('%name must be a number.', ['%name' => $field_name]));
     }
   }

@@ -439,7 +454,7 @@ public function assertSetMinimumValue($field, $minimum_value) {
     // Check if an error message is shown.
     $this->assertSession()->pageTextNotContains("Minimum is not a valid number.");
     // Check if a success message is shown.
-    $this->assertSession()->pageTextContains("Saved {$field->getLabel()} configuration.");
+    $this->assertSession()->responseContains(t('Saved %label configuration.', ['%label' => $field->getLabel()]));
     // Check if the minimum value was actually set.
     $this->drupalGet($field_configuration_url);
     $this->assertSession()->fieldValueEquals('edit-settings-min', $minimum_value);
