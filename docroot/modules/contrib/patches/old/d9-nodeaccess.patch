diff --git a/nodeaccess.info.yml b/nodeaccess.info.yml
index 0e0d711402..b9c7a99c74 100644
--- a/nodeaccess.info.yml
+++ b/nodeaccess.info.yml
@@ -3,7 +3,7 @@ description: Provides per node access control.
 package: Access control
 configure: nodeaccess.administration
 type: module
-core: 8.x
+core_version_requirement: ^8 || ^9

 dependencies:
   - drupal:node
diff --git a/nodeaccess.module b/nodeaccess.module
index 70bf0bcd23..57534ab655 100644
--- a/nodeaccess.module
+++ b/nodeaccess.module
@@ -69,16 +69,16 @@ function nodeaccess_node_access_records($node) {
     else {
       // Otherwise, check access to unpublished content for authenticated and
       // anonymous users.
-      $role_perms = user_role_permissions([DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID]);
+      $role_perms = user_role_permissions([AccountInterface::ANONYMOUS_ROLE, AccountInterface::AUTHENTICATED_ROLE]);
       // Anonymous user setting.
       $grants[] = [
-        'gid' => DRUPAL_ANONYMOUS_RID,
-        'grant_view' => in_array('bypass node access', $role_perms[DRUPAL_ANONYMOUS_RID]),
+        'gid' => AccountInterface::ANONYMOUS_ROLE,
+        'grant_view' => in_array('bypass node access', $role_perms[AccountInterface::ANONYMOUS_ROLE]),
       ];
       // Authenticated user setting.
       $grants[] = [
-        'gid' => DRUPAL_AUTHENTICATED_RID,
-        'grant_view' => in_array('bypass node access', $role_perms[DRUPAL_AUTHENTICATED_RID]),
+        'gid' => AccountInterface::AUTHENTICATED_ROLE,
+        'grant_view' => in_array('bypass node access', $role_perms[AccountInterface::AUTHENTICATED_ROLE]),
       ];
     }
   }
@@ -230,15 +230,16 @@ function nodeaccess_node_type_insert(NodeTypeInterface $type) {
   $config = \Drupal::configFactory()->getEditable('nodeaccess.settings');

   // New node type, default to whatever is set for access content permission.
-  $role_perms = user_role_permissions([DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID]);
-  $anonymous_access = (int) in_array('access content', $role_perms[DRUPAL_ANONYMOUS_RID]);
-  $authenticated_access = (int) in_array('access content', $role_perms[DRUPAL_AUTHENTICATED_RID]);
-  $grants[DRUPAL_ANONYMOUS_RID] = [
+  $role_perms = user_role_permissions([AccountInterface::ANONYMOUS_ROLE, AccountInterface::AUTHENTICATED_ROLE]);
+  $anonymous_access = (int) in_array('access content', $role_perms[AccountInterface::ANONYMOUS_ROLE]);
+  $authenticated_access = (int) in_array('access content', $role_perms[AccountInterface::AUTHENTICATED_ROLE]);
+
+  $grants[AccountInterface::ANONYMOUS_ROLE] = [
     'grant_view' => $anonymous_access,
     'grant_update' => 0,
     'grant_delete' => 0,
   ];
-  $grants[DRUPAL_AUTHENTICATED_RID] = [
+  $grants[AccountInterface::AUTHENTICATED_ROLE] = [
     'grant_view' => $authenticated_access,
     'grant_update' => 0,
     'grant_delete' => 0,
@@ -269,7 +270,7 @@ function nodeaccess_node_access(NodeInterface $node, $op, $account) {
       if ($account->id() == 0 && $node->getOwnerId() == 0) {
         // We check if the role has particular access to this node.
         $grants = _nodeaccess_get_grants($node);
-        $anonymous_rid = $role_map[DRUPAL_ANONYMOUS_RID];
+        $anonymous_rid = $role_map[AccountInterface::ANONYMOUS_ROLE];
         // If anonymous has rights to this node, we allow them.
         if (($grants['rid'][$anonymous_rid]['grant_update'] && $op == 'update') ||
             ($grants['rid'][$anonymous_rid]['grant_delete'] && $op == 'delete')) {
diff --git a/src/Form/GrantsForm.php b/src/Form/GrantsForm.php
index d61a786273..16518d148e 100644
--- a/src/Form/GrantsForm.php
+++ b/src/Form/GrantsForm.php
@@ -23,6 +23,7 @@ public function getFormId() {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, Node $node = NULL) {
+    $db = \Drupal::database();
     $form_values = $form_state->getValues();
     $settings = \Drupal::configFactory()->get('nodeaccess.settings');
     $nid = $node->id();
@@ -41,12 +42,13 @@ public function buildForm(array $form, FormStateInterface $form_state, Node $nod
       // Load all roles.
       foreach ($role_alias as $id => $role) {
         $rid = $role_map[$id];
-        $result = db_query("SELECT na.grant_view, na.grant_update, na.grant_delete
-        FROM {node_access} na where na.gid = :rid AND na.realm = :realm AND na.nid = :nid", [
-          ':rid' => $rid,
-          ':realm' => 'nodeaccess_rid',
-          ':nid' => $nid,
-        ])->fetchAssoc();
+        $query = $db->select('node_access', 'n')
+          ->fields('n', ['grant_view', 'grant_update', 'grant_delete'])
+          ->condition('n.gid', $rid, '=')
+          ->condition('n.realm', 'nodeaccess_rid', '=')
+          ->condition('n.nid', $nid)
+          ->execute();
+        $result = $query->fetchAssoc();
         if (!empty($result)) {
           $form_values['rid'][$rid] = [
             'name' => $role['alias'],
@@ -66,15 +68,15 @@ public function buildForm(array $form, FormStateInterface $form_state, Node $nod
       }

       // Load users from node_access.
-      $results = db_query("SELECT uid, name, grant_view, grant_update, grant_delete
-        FROM {node_access}
-        LEFT JOIN {users_field_data} ON uid = gid
-        WHERE nid = :nid AND realm = :realm
-        ORDER BY name", [
-          ':nid' => $nid,
-          ':realm' => 'nodeaccess_uid',
-        ]);
-      foreach ($results as $account) {
+      $query = $db->select('node_access', 'n');
+      $query->join('users_field_data', 'ufd', 'ufd.uid = n.gid');
+      $query->fields('n', ['grant_view', 'grant_update', 'grant_delete', 'nid']);
+      $query->fields('ufd', ['uid', 'name']);
+      $query->condition('n.nid', $nid, '=');
+      $query->condition('n.realm', 'nodeaccess_uid', '=');
+      $query->orderBy('ufd.name', 'ASC');
+      $results = $query->execute();
+      while ($account = $results->fetchObject()) {
         $form_values['uid'][$account->uid] = [
           'name' => $account->name,
           'keep' => 1,
@@ -88,16 +90,17 @@ public function buildForm(array $form, FormStateInterface $form_state, Node $nod
       // Perform search.
       if ($form_values['keys']) {
         $uids = [];
-        $sql = "SELECT uid, name FROM {users_field_data} WHERE uid in (:uids[])";
+        $query = $db->select('users_field_data', 'ufd');
+        $query->fields('ufd', ['uid', 'name']);
         if (isset($form_values['uid']) && is_array($form_values['uid'])) {
           $uids = array_keys($form_values['uid']);
         }
         if (!in_array($form_values['keys'], $uids)) {
           array_push($uids, $form_values['keys']);
         }
-        $params = [':uids[]' => $uids];
-        $result = db_query($sql, $params);
-        foreach ($result as $account) {
+        $query->condition('ufd.uid', $uids, 'IN');
+        $results = $query->execute();
+        while ($account = $results->fetchObject()) {
           $form_values['uid'][$account->uid] = [
             'name' => $account->name,
             'keep' => 0,
@@ -105,49 +108,44 @@ public function buildForm(array $form, FormStateInterface $form_state, Node $nod
         }
       }
       // Calculate default grants for found users.
-      $db = \Drupal::database();
       if (isset($form_values['uid']) && is_array($form_values['uid'])) {
+        // set the cast type depending on which database engine is being used.
         if (strstr($db->version(), 'MariaDB') !== FALSE) {
           $cast_type = 'int';
         }
+        elseif (strstr($db->clientVersion(), 'PostgreSQL') !== FALSE) {
+          $cast_type = 'integer';
+        }
         else {
+          // assume it's MySQL.
           $cast_type = 'unsigned';
         }
         foreach (array_keys($form_values['uid']) as $uid) {
           if (!$form_values['uid'][$uid]['keep']) {
             foreach (['grant_view', 'grant_update', 'grant_delete'] as $grant_type) {
-              $form_values['uid'][$uid][$grant_type] = $db->queryRange('
-                SELECT count(*) FROM {node_access} na
-                LEFT JOIN {user__roles} r ON (na.gid = CAST(r.roles_target_id as ' . $cast_type . '))
-                WHERE na.nid = :nid
-                  AND na.realm = :realm
-                  AND r.entity_id = :uid
-                  AND :grant_type = :one',
-                0,
-                1,
-                [
-                  ':nid' => $nid,
-                  ':realm' => 'nodeaccess_rid',
-                  ':uid' => $uid,
-                  ':grant_type' => $grant_type,
-                  ':one' => 1,
-                ])->fetchField() ||
-                $db->queryRange('
-                  SELECT count(*) FROM {node_access}
-                  WHERE nid = :nid
-                    AND realm = :realm
-                    AND gid = :gid
-                    AND :grant_type = :one',
-                  0,
-                  1,
-                  [
-                    ':nid' => $nid,
-                    ':realm' => 'nodeaccess_uid',
-                    ':grant_type' => $grant_type,
-                    ':gid' => $uid,
-                    ':one' => 1,
-                  ]
-                  )->fetchField();
+
+              $query = $db->select('node_access', 'na');
+              $query->join('user__roles', 'r', '(na.gid = CAST(r.roles_target_id as ' . $cast_type . '))');
+              $query->condition('na.nid', $nid, '=');
+              $query->condition('na.realm', 'nodeaccess_rid', '=');
+              $query->condition('r.entity_id', $uid, '=');
+              $query->condition($grant_type, '1', '=');
+              $query->range(0, 1);
+              $query = $query->countQuery();
+              $results = $query->execute();
+              $count1 = $results->fetchField();
+
+              $query = $db->select('node_access', 'na');
+              $query->condition('na.nid', $nid, '=');
+              $query->condition('na.realm', 'nodeaccess_uid', '=');
+              $query->condition('na.gid', $uid, '=');
+              $query->condition($grant_type, '1', '=');
+              $query->range(0, 1);
+              $query = $query->countQuery();
+              $results = $query->execute();
+              $count2 = $results->fetchField();
+
+              $form_values['uid'][$uid][$grant_type] = $count1 || $count2;
             }
             $form_values['uid'][$uid]['keep'] = TRUE;
           }
@@ -308,6 +306,7 @@ public function validateForm(array &$form, FormStateInterface $form_state) {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
+    $db = \Drupal::database();
     // Update configuration.
     $values = $form_state->getValues();
     $nid = $values['nid'];
@@ -332,11 +331,11 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
       }
     }
     // Save role and user grants to our own table.
-    \Drupal::database()->delete('nodeaccess')
+    $db->delete('nodeaccess')
       ->condition('nid', $nid)
       ->execute();
     foreach ($grants as $grant) {
-      $id = db_insert('nodeaccess')
+      $id = $db->insert('nodeaccess')
         ->fields([
           'nid' => $nid,
           'gid' => $grant['gid'],
@@ -347,8 +346,9 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
         ])
         ->execute();
     }
-    \Drupal::entityTypeManager()->getAccessControlHandler('node')->writeGrants($node);
-    drupal_set_message($this->t('Grants saved.'));
+    \Drupal::entityTypeManager()->getAccessControlHandler('node')->acquireGrants($node);
+    \Drupal::service('node.grant_storage')->write($node, $grants);
+    \Drupal::messenger()->addMessage($this->t('Grants saved.'));

     $tags = ['node:' . $node->id()];
     Cache::invalidateTags($tags);
